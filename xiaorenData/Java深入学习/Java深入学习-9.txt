[{"题干":"Java Hash Map  中  loadFactor的含义","选项F":"","选项E":"","选项D":"阈值","答案":"B","选项C":"大小","选项B":"负载因子","选项A":"容量","类型":"1-单选"},{"题干":"Java Hash Map  中  loadFactor的默认值是","选项F":"","选项E":"","选项D":"1.0","答案":"C","选项C":"0.75","选项B":"0.8","选项A":"0.5","类型":"1-单选"},{"题干":"JDK1.8中  hashMap的默认初始容量是","选项F":"","选项E":"","选项D":"32","答案":"C","选项C":"16","选项B":"4","选项A":"2","类型":"1-单选"},{"题干":"hashMap的默认最大容量是","选项F":"","选项E":"","选项D":"2的30次幂","答案":"D","选项C":"2 的31次幂","选项B":"2的32次幂","选项A":"2的16次幂","类型":"1-单选"},{"题干":"hashMap中 链表转成红黑树的默认阈值是","选项F":"","选项E":"","选项D":"6","答案":"A","选项C":"32","选项B":"16","选项A":"8","类型":"1-单选"},{"题干":"hashMap中 红黑树转成链表的默认阈值是","选项F":"","选项E":"","选项D":"6","答案":"D","选项C":"32","选项B":"16","选项A":"8","类型":"1-单选"},{"题干":"HashMap中modCount作用是","选项F":"","选项E":"","选项D":"记录元素的个数","答案":"B","选项C":"记录当前的模式","选项B":"记录修改次数","选项A":"保证迭代器的线程安全","类型":"1-单选"},{"题干":"java中HashMap的默认加载因子是？","选项F":"","选项E":"","选项D":"120%","答案":"B","选项C":"100%","选项B":"75%","选项A":"50%","类型":"1-单选"},{"题干":"获取HashMap所有的key的方法是","选项F":"","选项E":"","选项D":"keySet()","答案":"D","选项C":"allKeys()","选项B":"getAallKeys()","选项A":"keyList()","类型":"1-单选"},{"题干":"HashMap扩容的时候调用的函数是：","选项F":"","选项E":"","选项D":"values","答案":"A","选项C":"clear","选项B":"treeifyBin","选项A":"resize","类型":"1-单选"},{"题干":"以下能以键_值对的方式存储对象的接口是","选项F":"","选项E":"","选项D":"java.util.Set","答案":"B","选项C":"java.util.HashMap","选项B":"java.util.Map","选项A":"java.util.Collection","类型":"1-单选"},{"题干":"在Java中，(\u00A0\u00A0 )类可用于创建链表数据结构的对象","选项F":"","选项E":"","选项D":"HashMap","答案":"B","选项C":"Collection","选项B":"LinkedList","选项A":"ArrayList","类型":"1-单选"},{"题干":"在JAVA中ArrayList类实现了可变大小的数组，便于遍历元素和随机访问元素，已知获得了ArrayList类的对象bookTypeList，则下列语句中能够实现判断列表中是否存在字符串“小说”的是()","选项F":"","选项E":"","选项D":"bookTypeList.remove(\"小说\");\u00A0","答案":"C","选项C":"bookTypeList.contains(\"小说\");","选项B":"bookTypeList.get(\"小说\");","选项A":"bookTypeList.add(\"小说\");","类型":"1-单选"},{"题干":"使用迭代器遍历集合中的元素，判断集合中是否仍有元素的方法是（  ）。","选项F":"","选项E":"","选项D":"next()","答案":"B","选项C":"has()","选项B":"hasNext()","选项A":"isNext()","类型":"1-单选"},{"题干":"在Java中以下哪一项是Collection父接口：","选项F":"","选项E":"","选项D":"Vector","答案":"A","选项C":"Set","选项B":"List","选项A":"Iterable","类型":"1-单选"},{"题干":"在Java中对于HashMap集合说法正确的是","选项F":"","选项E":"","选项D":"不可以存储null值和null键","答案":"C","选项C":"可以存储null值和null键","选项B":"底层是链表结构","选项A":"底层是数组结构","类型":"1-单选"},{"题干":"ArrayList和Vector的区别说法正确的是","选项F":"","选项E":"","选项D":"ArrayList底层是链表结构，Vector底层是数组结构","答案":"B","选项C":"ArrayList底层是数组结构，Vector底层是链表结构","选项B":"ArrayList是线程不安全的，Vector是线程安全","选项A":"ArrayList是线程安全的，Vector是线程不安全","类型":"1-单选"},{"题干":"LinkedList类的特点是","选项F":"","选项E":"","选项D":"元素自然排序","答案":"B","选项C":"元素不重复","选项B":"增删快\u00A0","选项A":"查询快","类型":"1-单选"},{"题干":"java中ArrayList类的底层数据结构是","选项F":"","选项E":"","选项D":"红黑树结构","答案":"A","选项C":"哈希表结构","选项B":"链表结构","选项A":"数组结构","类型":"1-单选"},{"题干":"实现下列哪个接口，可以启用比较功能","选项F":"","选项E":"","选项D":"Comparator接口","答案":"D","选项C":"Serializable接口","选项B":"Iterator接口","选项A":"Runnable接口","类型":"1-单选"},{"题干":"hashMap中存储数组的数据节点的数据类型描述正确的是","选项F":"","选项E":"","选项D":"有指向下一个元素的指针","答案":"ABCD","选项C":"是HashMap.Node<K,V>类型","选项B":"该节点存放了hash值","选项A":"实现了Map.Entry接口","类型":"2-多选"},{"题干":"下列属于HashMap直接提供的函数是","选项F":"","选项E":"","选项D":"notify","答案":"ABC","选项C":"replace","选项B":"putAll","选项A":"put","类型":"2-多选"},{"题干":"HashMap 实现的接口有","选项F":"","选项E":"","选项D":"Serializable","答案":"ABD","选项C":"AbstractMap","选项B":"Cloneable","选项A":"Map","类型":"2-多选"},{"题干":"HashMap的实现涉及到的数据结构有","选项F":"","选项E":"","选项D":"队列","答案":"ABC","选项C":"树","选项B":"链表","选项A":"集合","类型":"2-多选"},{"题干":"Jdk1.8遍历HashMap的方法有","选项F":"","选项E":"","选项D":"for\u00A0(int\u00A0i\u00A0=\u00A00;\u00A0i\u00A0<\u00A0args.length;\u00A0i++)\u00A0形式的循环","答案":"AC","选项C":"获取所有的key，然后遍历","选项B":"使用迭代器","选项A":"使用forEach函数","类型":"2-多选"},{"题干":"Java中关于迭代器说法正确的是","选项F":"","选项E":"","选项D":"next()方法将返回集合中的上一个元素","答案":"ABC","选项C":"List集合有特有迭代器","选项B":"迭代器的hasNext()方法返回值是布尔类型","选项A":"迭代器是取出集合元素的方式","类型":"2-多选"},{"题干":"下面类或者接口中，属于集合体系的是","选项F":"","选项E":"","选项D":"java.util.Hashtable","答案":"BCD","选项C":"java.util.Vector","选项B":"java.util.Map","选项A":"java.util.Collections","类型":"2-多选"},{"题干":"下列（  ）选项中的方法是LinkedList类和ArrayList类都有的方法有哪些","选项F":"","选项E":"","选项D":"removeLast()","答案":"ABC","选项C":"remove(Object�o)�","选项B":"add(int�index,Object�o)","选项A":"�add(Object�o)�","类型":"2-多选"},{"题干":"在Java中以下关于Set中add方法说法正确的是（  ）","选项F":"","选项E":"","选项D":"向Set中添加元素的时候，如果Set中有相同的元素，则返回值为false","答案":"ABD","选项C":"此方法的返回值类型是void","选项B":"此方法的功能是向集合添加元素","选项A":"此方法的返回值类型是boolean型","类型":"2-多选"},{"题干":"在Java中以下关于Set的说法中正确的有（  ）。","选项F":"","选项E":"","选项D":"Set集合中的元素不可重复","答案":"ACD","选项C":"Set继承自Collection","选项B":"Set集合中的元素可以重复","选项A":"Set集合是无序的","类型":"2-多选"},{"题干":"Jdk1.8 HashMap的是线程安全的","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Jdk1.8 遍历HashMap的过程中可以对元素进行删改等操作","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"JDK1.8中 HashMap可以存放空元素","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"java的HashMap的iterator与 LinkList的iterator是同一个类","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"TreeMap 是基于HashMap 实现的","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"红黑树是一种自动平衡的二叉树","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"java中HashMap是线程安全的","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"java中HashTable不是线程安全的","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"HashMap最多只允许一条记录的键为null，允许多条记录的值为null，而 HashTable 不允许","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"在Set集合中，添加一个元素，可以采用add()方法。","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"在Set集合的方法中，判断该集合是否存在某个元素，可以采用contains()方法。","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"}]