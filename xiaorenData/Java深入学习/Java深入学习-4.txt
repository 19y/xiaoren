[{"题干":"关于函数式接口说法正确的是","选项F":"","选项E":"","选项D":"函数式接口不能定义成员变量","答案":"A","选项C":"函数式接口不能被继承","选项B":"函数式接口只能有一个方法。","选项A":"Lambda表达式需要借助函数式接口实现","类型":"1-单选"},{"题干":"关于函数式接口说法不正确的是","选项F":"","选项E":"","选项D":"默认方法重新声明，则变成了普通方法","答案":"C","选项C":"默认方法不可以被重写","选项B":"函数式接口可以被继承","选项A":"final静态方法不可以被继承","类型":"1-单选"},{"题干":"jdk 8 中的Collection增加了下列哪个方法","选项F":"","选项E":"","选项D":"toArray","答案":"C","选项C":"forEach","选项B":"size","选项A":"contains","类型":"1-单选"},{"题干":"jdk8 中接口默认方法需要加下列哪个关键字进行修饰","选项F":"","选项E":"","选项D":"DEFAULT","答案":"C","选项C":"default","选项B":"static","选项A":"Default","类型":"1-单选"},{"题干":"函数式接口的英文表示是","选项F":"","选项E":"","选项D":"Interface Functional","答案":"B","选项C":"method Functional","选项B":"Functional Interface","选项A":"Functional method","类型":"1-单选"},{"题干":"Comparator　接口的作用是","选项F":"","选项E":"","选项D":"修改","答案":"B","选项C":"查找","选项B":"比较","选项A":"排序","类型":"1-单选"},{"题干":"Stream　中filter的作用是","选项F":"","选项E":"","选项D":"转换","答案":"A","选项C":"比较","选项B":"计数","选项A":"过滤","类型":"1-单选"},{"题干":"Stream 中返回第一个匹配元素的函数是","选项F":"","选项E":"","选项D":"forEachOrdered","答案":"A","选项C":"collect","选项B":"findAny","选项A":"findFirst","类型":"1-单选"},{"题干":"声明函数式接口需要加的注解是","选项F":"","选项E":"","选项D":"@Optional","答案":"C","选项C":"@FunctionalInterface","选项B":"@default","选项A":"@FunctionalDefault","类型":"1-单选"},{"题干":"以下哪个不是JDK1.8中新增的日期格式","选项F":"","选项E":"","选项D":"LONG","答案":"B","选项C":"MEDIUM","选项B":"NULL","选项A":"SHORT","类型":"1-单选"},{"题干":"JDK1.8 新增Short类型新增的方法是","选项F":"","选项E":"","选项D":"compare","答案":"C","选项C":"hashCode","选项B":"equals","选项A":"reverseBytes","类型":"1-单选"},{"题干":"结构化程序设计所规定的三种基本控制结构是","选项F":"","选项E":"","选项D":"主程序、子程序、函数","答案":"C","选项C":"顺序、选择、循环","选项B":"树形、网形、环形","选项A":"输入、处理、输出","类型":"1-单选"},{"题干":"下面的方法，当输入为2的时候返回值是多少?（   ）\n    public int getValue(int i) {\n        int result = 0;\n        switch (i) {\n            case 1:\n                result = result + i;\n            case 2:\n                result = result + i * 2;\n            case 3:\n                result = result + i * 3;\n        }\n        return result;\n    }","选项F":"","选项E":"","选项D":"10","答案":"D","选项C":"4","选项B":"2","选项A":"0","类型":"1-单选"},{"题干":"阅读以下代码，认真分析\n  int i=0,s=0;  \n  do{   \n   if(i%2>0)\n   {i++;continue;}  i++;  s+=i;   } \n  while(i<7); \n  System.out.println(s);  \n  执行后输出的结果是（ ）","选项F":"","选项E":"","选项D":"28","答案":"A","选项C":"20","选项B":"12","选项A":"16","类型":"1-单选"},{"题干":"以下代码的执行结果是:\n　　public class Test4{\n　　public static void main(String args[]){\n　　int a=4,b=6,c=8;\n　　String s=\"abc\";\n　　System.out.println(a+b+s+c);\n　　System.out.println();\n　　}\n　　}","选项F":"","选项E":"","选项D":"10abc8","答案":"D","选项C":"46abc8","选项B":"464688","选项A":"ababcc","类型":"1-单选"},{"题干":"关于权限访问控制符中，访问权限最小的是","选项F":"","选项E":"","选项D":"protected","答案":"B","选项C":"default","选项B":"private","选项A":"public","类型":"1-单选"},{"题干":"在Java语言中访问修饰符从大到小依次为（ ）。","选项F":"","选项E":"","选项D":"public>private>protected>default","答案":"B","选项C":"public>protected>private>default","选项B":"public>protected>default>private","选项A":"public>default>protected>private","类型":"1-单选"},{"题干":"在类中定义成员变量时，把访问修饰符设置为protected，则该变量的访问范围是（  ）。","选项F":"","选项E":"","选项D":"本包和不同包的子类","答案":"D","选项C":"所有包","选项B":"本包","选项A":"本类","类型":"1-单选"},{"题干":"如下员工类Emp有（  ）个构造器。\npublic class Emp { \n   private String name;\n   private int age;\n\n   //带有参数的构造函数\n   public Emp(String name, int age) {\n     this.name = name;\n     this.age = age;\n  }\n}","选项F":"","选项E":"","选项D":"3","答案":"B","选项C":"2","选项B":"1","选项A":"0","类型":"1-单选"},{"题干":"可以采用那个运算符避免java.lang.ClassCastException","选项F":"","选项E":"","选项D":"&","答案":"A","选项C":"||","选项B":"&&","选项A":"instanceof","类型":"1-单选"},{"题干":"执行以下代码，输出的结果是:\nint a [] = new int [5] ;     \nSystem.out.println(++ a[3]) ;","选项F":"","选项E":"","选项D":"3","答案":"A","选项C":"2","选项B":"0","选项A":"1","类型":"1-单选"},{"题干":"下列Collection那些是JDK1.8提供的","选项F":"","选项E":"","选项D":"removeIf()","答案":"ABCD","选项C":"forEach()","选项B":"parallelStream()","选项A":"stream()","类型":"2-多选"},{"题干":"jdk8 中 Comparator提供的新方法有","选项F":"","选项E":"","选项D":"thenComparingDouble","答案":"ABCD","选项C":"thenComparingLong","选项B":"thenComparingInt","选项A":"thenComparing","类型":"2-多选"},{"题干":"Stream的中间操作包含如下选项中的哪些？ （   ）","选项F":"","选项E":"","选项D":"peek","答案":"ABD","选项C":"filting","选项B":"distinct","选项A":"filter","类型":"2-多选"},{"题干":"下列哪些是Stream的中间操作（   ）","选项F":"","选项E":"","选项D":"skiping","答案":"ABC","选项C":"parallel","选项B":"skip","选项A":"limit","类型":"2-多选"},{"题干":"Stream的中间操作包含下列中的","选项F":"","选项E":"","选项D":"unordered","答案":"ACD","选项C":"sorted","选项B":"toping","选项A":"sequential","类型":"2-多选"},{"题干":"以下属于jdk1.8的新特性的有","选项F":"","选项E":"","选项D":"Stream API","答案":"ABCD","选项C":"方法引用与构造器引用","选项B":"函数式接口","选项A":"Lambda 表达式","类型":"2-多选"},{"题干":"以下属于jdk1.8的新特性带来的好处有哪些","选项F":"","选项E":"","选项D":"最大化减少空指针异常 Optional","答案":"ABCD","选项C":"便于并行","选项B":"代码更少（增加了新的语法 Lambda 表达式）","选项A":"速度更快","类型":"2-多选"},{"题干":"以下属于Java内置核心函数式接口的有","选项F":"","选项E":"","选项D":"Predicate<T> 断定型接口","答案":"ABCD","选项C":"Function<T, R> 函数型接口","选项B":"Supplier<T> 供给型接口","选项A":"Consumer<T> 消费型接口","类型":"2-多选"},{"题干":"以下属于jdk1.8关于新日期的API有","选项F":"","选项E":"","选项D":"Calendar","答案":"ABC","选项C":"LocalDateTime","选项B":"LocalTime","选项A":"LocalDate","类型":"2-多选"},{"题干":"Java 8对注解处理提供了两点改进是","选项F":"","选项E":"","选项D":"可用于类型的注解","答案":"CD","选项C":"可重复的注解","选项B":"字段注解","选项A":"元注解","类型":"2-多选"},{"题干":"Lambda是在jdk1.8才提出的","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Runnable是典型的函数式接口","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Thread 是典型的函数式接口","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"join 是jdk\u00A08\u00A0新增String的函数","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Base64 是JDK1.8才提供的类。","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Unicode是用16位来表示一个字的","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"原生类中的数据类型均可任意转换","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"接口中的默认方法与静态方法从JDK1.7开始引入的","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Lambda 表达式中的参数类型都是由编译器推断得出的","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Stream API 提供了一种高效且易于使用的处理数据的方式","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"}]