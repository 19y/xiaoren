[{"题干":"Java中，以下变量名不合法的是：","选项F":"","选项E":"","选项D":"d1_$","答案":"B","选项C":"_wea","选项B":"2ddw","选项A":"dda_123","类型":"1-单选"},{"题干":"泛型限定：<?>代表的泛型是","选项F":"","选项E":"","选项D":"固定指代某类型","答案":"A","选项C":"某类型的父类型","选项B":"某类型的子类型","选项A":"任意类型","类型":"1-单选"},{"题干":"泛型的本质是参数化类型，而这种（）可以用在接口的创建中，称为泛型接口。","选项F":"","选项E":"","选项D":"构造方法","答案":"B","选项C":"方法","选项B":"参数类型","选项A":"类","类型":"1-单选"},{"题干":"泛型是JavaSE版本新特性。","选项F":"","选项E":"","选项D":"1.7","答案":"C","选项C":"1.5","选项B":"1.6","选项A":"1.4","类型":"1-单选"},{"题干":"泛型类写在什么位置？","选项F":"","选项E":"","选项D":"返回值类型前","答案":"B","选项C":"方法名前","选项B":"类名后","选项A":"类名前","类型":"1-单选"},{"题干":"下列选项中表示<? super T> 代表的泛型是 (  )","选项F":"","选项E":"","选项D":"固定指代某类型","答案":"C","选项C":"某类型的父类型","选项B":"某类型的子类型","选项A":"任意类型","类型":"1-单选"},{"题干":"下列选项中表示<? extends T> 代表的泛型是  (  )","选项F":"","选项E":"","选项D":"固定指代某类型","答案":"B","选项C":"某类型的父类型","选项B":"某类型的子类型","选项A":"任意类型","类型":"1-单选"},{"题干":"下列选项中关于泛型方法说法正确的是()","选项F":"","选项E":"","选项D":"泛型的本质是参数化类型，这种参数类型可以用在构造方法的创建中，称为泛型方法。","答案":"C","选项C":"泛型的本质是参数化类型，这种参数类型可以用在方法的创建中，称为泛型方法。","选项B":"泛型的本质是参数化类型，这种参数类型可以用在接口的创建中，称为泛型方法。","选项A":"泛型的本质是参数化类型，这种参数类型可以用在类的创建中，称为泛型方法。","类型":"1-单选"},{"题干":"以下代码能实现泛型类的是()","选项F":"","选项E":"","选项D":"public class <College T>{ public void save(T t){} }","答案":"A","选项C":"public class <T> College{ public void update(T t){} }","选项B":"public <T> class College{ public void add(T t){} }","选项A":"public class College<T>{ public void list(T t){} }","类型":"1-单选"},{"题干":"JVM中是否存在泛型？","选项F":"","选项E":"","选项D":"可以手动调试出来","答案":"A","选项C":"有时候存在","选项B":"存在","选项A":"不存在","类型":"1-单选"},{"题干":"java中关于擦除问题，java虚拟机中会把泛型参数类型","选项F":"","选项E":"","选项D":"全部擦除","答案":"D","选项C":"有时候擦除","选项B":"包装类型擦除","选项A":"不擦除","类型":"1-单选"},{"题干":"java里，以下哪种泛型定义是不正确的","选项F":"","选项E":"","选项D":"class Test{\n  void <T>test() {\n }\n}","答案":"D","选项C":"class Test {\n  <T> void test() {\n  }\n}","选项B":"interface Test<T> {\n}","选项A":"class Test<T> {\n}","类型":"1-单选"},{"题干":"java中，特定泛型<T>代表的泛型是哪个","选项F":"","选项E":"","选项D":"固定指代某类型","答案":"D","选项C":"某类型的父类型","选项B":"某类型的子类型","选项A":"任意类型","类型":"1-单选"},{"题干":"关于java泛型，以下哪个java代码编译时是正确的","选项F":"","选项E":"","选项D":"List<float> tlist4 = new ArrayList<float>();\ntlist4.add(1.2);","答案":"B","选项C":"List<int> tlist3 = new ArrayList<int>();\ntlist3.add(1);","选项B":"List<Integer> tlist2 = new ArrayList<Integer>();\ntlist2.add(1);","选项A":"List<String> tlist1 = new ArrayList<String>();\ntlist1.add(1);","类型":"1-单选"},{"题干":"关于java泛型，编译时不出错的是","选项F":"","选项E":"","选项D":"Collection<?> c4 = new ArrayList<String>();\nc4.add(null);","答案":"D","选项C":"Collection<?> c3 = new ArrayList<String>();\nc3.add(\"1\");","选项B":"Collection<?> c2 = new ArrayList<String>();\nc2.add(new String(\"1\"));","选项A":"Collection<?> c1 = new ArrayList<String>();\nc1.add(new Object());","类型":"1-单选"},{"题干":"关于java泛型，编译下面的java代码不出错的是","选项F":"","选项E":"","选项D":"List<? super Integer> x4 = new ArrayList<Short>();","答案":"A","选项C":"List<? super Number> x3 = new ArrayList<Short>();","选项B":"List<? super Number> x2 = new ArrayList<Integer>();","选项A":"List<? super Integer> x1 = new ArrayList<Number>();","类型":"1-单选"},{"题干":"java中，如果泛型类是一个接口，能否创建泛型类的对象？","选项F":"","选项E":"","选项D":"编译正确","答案":"B","选项C":"有时候可以","选项B":"不可以","选项A":"可以","类型":"1-单选"},{"题干":"java代码，\nList<String> list = new ArrayList<String>();\nlist.add(\"test\");\nlist.add(\"red\");\nlist.add(100);\nSystem.out.println(list.size());\n哪个说法是正确的","选项F":"","选项E":"","选项D":"运行时报异常","答案":"C","选项C":"编译错误","选项B":"3","选项A":"2","类型":"1-单选"},{"题干":"运行下面的java代码，\nList lista = new ArrayList();  \nlista.add(\"test\");  \nlista.add(100);  \nfor (int i = 0; i < lista.size(); i++) {  \n    String name = (String) lista.get(i);\n    System.out.println(name);  \n}\n说法正确的是","选项F":"","选项E":"","选项D":"运行时报异常","答案":"D","选项C":"编译错误","选项B":"test","选项A":"test\n100","类型":"1-单选"},{"题干":"运行java代码\nList<Integer> ex_int= new ArrayList<Integer>();    \nList<Number> ex_num = ex_int;\nSystem.out.println(ex_num.size());\n正确的说法是","选项F":"","选项E":"","选项D":"1","答案":"B","选项C":"运行时报异常","选项B":"编译错误","选项A":"0","类型":"1-单选"},{"题干":"泛型的好处包括哪些方面？","选项F":"","选项E":"","选项D":"优化了程序设计，解决了黄色警告线","答案":"ABD","选项C":"让代码自动运行","选项B":"消除强制类型转换","选项A":"类型安全","类型":"2-多选"},{"题干":"下面关于泛型中参数类型说法正确的是()","选项F":"","选项E":"","选项D":"参数类型可以是基本类型","答案":"AB","选项C":"参数类型只能是字符串类型","选项B":"参数类型不能是基本类型","选项A":"参数类型只能是类类型","类型":"2-多选"},{"题干":"下列泛型写法正确的是()","选项F":"","选项E":"","选项D":"< ? extends E super T>","答案":"ABC","选项C":"<? super T>","选项B":"<? extends T>","选项A":"<T>","类型":"2-多选"},{"题干":"泛型写在什么位置 ？ (  )","选项F":"","选项E":"","选项D":"返回值类型前","答案":"BD","选项C":"方法名前","选项B":"类名后","选项A":"类名前","类型":"2-多选"},{"题干":"Integer包装类中valueOf的作用是（ ）。","选项F":"","选项E":"","选项D":"将int类型转化为Integer类型","答案":"CD","选项C":"将字符串转化成Integer类型","选项B":"将int类型转化为字符串类型","选项A":"将Integer类型转化成int类型","类型":"2-多选"},{"题干":"关于java泛型，使用泛型应该注意什么","选项F":"","选项E":"","选项D":"不能创建一个确切的泛型类型的数组","答案":"ABCD","选项C":"不能对确切的泛型类型使用instanceof操作。如操作是非法的，编译时会出错。","选项B":"泛型的类型参数可以有多个。","选项A":"泛型的类型参数只能是类类型（包括自定义类），不能是简单类型。","类型":"2-多选"},{"题干":"关于java泛型，java中下列写法正确的是","选项F":"","选项E":"","选项D":"class Test{\n  void <T>test() {\n }\n}","答案":"ABC","选项C":"class Test {\n  <T> void test() {\n  }\n}","选项B":"interface Test<T> {\n}","选项A":"class Test<T> {\n}","类型":"2-多选"},{"题干":"java泛型，下列写法正确的包括哪几个","选项F":"","选项E":"","选项D":"< ? extend E super T>","答案":"ABC","选项C":"<? super T>","选项B":"<? extend T>","选项A":"<T>","类型":"2-多选"},{"题干":"关于java泛型，下面的java代码写法错误的是哪些","选项F":"","选项E":"","选项D":"List<String> list=new List<String>();","答案":"ACD","选项C":"ArrayList<String> list=new List<String>();","选项B":"List<String> list=new ArrayList<String>();","选项A":"List<String> list=new ArrayList<Integer>();","类型":"2-多选"},{"题干":"哪些泛型类是List<?>的子类","选项F":"","选项E":"","选项D":"List<float>","答案":"ABCD","选项C":"List<Integer>","选项B":"List<Object>","选项A":"List<String>","类型":"2-多选"},{"题干":"final修饰的类不能被继承","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"接口不能被实例化","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"泛型的好处是在运行的时候检查类型安全","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"Java语言中泛型的本质是参数化类型","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"泛型的类型参数只能是引用数据类型，不能是类类型","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"关于java的泛型，在JAVA的虚拟机中存在泛型","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"关于java的泛型，不能对确切的泛型类型使用instance of操作。如操作是非法的，编译时会出错","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"关于java的泛型，泛型的类型参数只能是类类型（包括自定义类），不能是简单类型","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"对于java泛型类（含集合类），对象实例化时不指定泛型，默认为Object","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"String是Object的子类，List<String>也是List<Object>的子类","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"}]