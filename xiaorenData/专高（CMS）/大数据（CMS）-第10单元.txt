[{"题干":"大数据（CMS）关于Java对象的引用哪种引用最不容易被回收？","选项F":"","选项E":"","选项D":"虚引用\u00A0PhantomReference","答案":"A","选项C":"弱引用\u00A0WeakReference","选项B":"软引用\u00A0SoftReference","选项A":"强引用\u00A0StrongReference","类型":"1-单选"},{"题干":"大数据（CMS）下列哪个垃圾回收算法内存利用率最低？","选项F":"","选项E":"","选项D":"标记-整理算法","答案":"C","选项C":"标记复制算法","选项B":"分代收集算法","选项A":"标记-清除算法","类型":"1-单选"},{"题干":"大数据（CMS）关于程序计数器以下描述错误的是","选项F":"","选项E":"","选项D":"线程共享单元","答案":"D","选项C":"可以通过通过改变这个计数器的值来选取下一条需要执行的字节码指令","选项B":"jvm 会给每个线程创建单独的程序计数器","选项A":"线程私有单元","类型":"1-单选"},{"题干":"大数据（CMS）分代收集算法中内存划分的区域不包含","选项F":"","选项E":"","选项D":"临时区","答案":"D","选项C":"乐园区","选项B":"新生代","选项A":"老年代","类型":"1-单选"},{"题干":"大数据（CMS）虚拟机栈与线程的关系是","选项F":"","选项E":"","选项D":"二者没有必然联系","答案":"A","选项C":"栈可以被多个线程访问","选项B":"线程可以单独存在","选项A":"同时创建","类型":"1-单选"},{"题干":"大数据（CMS）类的结构信息存储在那个区？","选项F":"","选项E":"","选项D":"虚拟机栈","答案":"B","选项C":"程序计数器","选项B":"方法区","选项A":"堆","类型":"1-单选"},{"题干":"大数据（CMS）StackOverflowError 是哪个区不足的时候抛出的异常？","选项F":"","选项E":"","选项D":"直接内存","答案":"C","选项C":"虚拟机栈","选项B":"内部方法栈","选项A":"堆","类型":"1-单选"},{"题干":"大数据（CMS）下列哪个垃圾回收算法最容易造成内存碎片","选项F":"","选项E":"","选项D":"标记-整理算法","答案":"A","选项C":"标记复制算法","选项B":"分代收集算法","选项A":"标记-清除算法","类型":"1-单选"},{"题干":"大数据（CMS）下列哪种引用垃圾回收器在内存充足的时候不会回收，而在内存不足时会回收？","选项F":"","选项E":"","选项D":"虚引用\u00A0PhantomReference","答案":"B","选项C":"弱引用\u00A0WeakReference","选项B":"软引用\u00A0SoftReference","选项A":"强引用\u00A0StrongReference","类型":"1-单选"},{"题干":"大数据（CMS）哪一种引用类型在内存不足时宁愿抛出\u00A0OOM错误也不被垃圾回收器回收？","选项F":"","选项E":"","选项D":"虚引用\u00A0PhantomReference","答案":"A","选项C":"弱引用\u00A0WeakReference","选项B":"软引用\u00A0SoftReference","选项A":"强引用\u00A0StrongReference","类型":"1-单选"},{"题干":"大数据（CMS）哪种引用类型垃圾回收器在扫描到该对象时，无论内存充足与否，都会回收该对象的内存","选项F":"","选项E":"","选项D":"栈引用\u00A0StackReference","答案":"C","选项C":"弱引用\u00A0WeakReference","选项B":"软引用\u00A0SoftReference","选项A":"强引用\u00A0StrongReference","类型":"1-单选"},{"题干":"大数据（CMS）关于对象的删除，下列说法正确的是（   ）","选项F":"","选项E":"","选项D":"java中的对象都很小，一般不进行删除操作","答案":"C","选项C":"只有当程序中调用System.gc()方法时才能进行垃圾收集","选项B":"java把没有引用的对象作为垃圾收集起来并释放","选项A":"必须由程序员完成对象的清除","类型":"1-单选"},{"题干":"大数据（CMS）以下描述中关于Java内存回收的说明是正确的","选项F":"","选项E":"","选项D":"内存回收程序可以在指定的时间释放内存对象","答案":"B","选项C":"内存回收程序允许程序员直接释放内存","选项B":"内存回收程序负责释放无用内存","选项A":"程序员必须创建一个线程来释放内存","类型":"1-单选"},{"题干":"大数据（CMS）以下关于垃圾收集算法中标记清除法的说法错误的是","选项F":"","选项E":"","选项D":"标记清除后会产生大量不连续的内存碎片，从而导致在分配大对象时触发GC","答案":"C","选项C":"效率高，标记和清除的效率都高","选项B":"优点是简单","选项A":"算法分成标记和清除两个阶段，先标记出要回收的对象，然后统一回收这些对象","类型":"1-单选"},{"题干":"大数据（CMS）以下关于垃圾收集算法中复制算法的说法错误的是","选项F":"","选项E":"","选项D":"内存浪费小，使用率高","答案":"D","选项C":"优点是实现简单，运行高效，不用考虑内存碎片问题","选项B":"商业虚拟机都采用这种收集算法来回收新生代","选项A":"将可用内存按容量划分为大小相等的两块，每次只使用其中的一块，当这一块的内存用完了。就将还存活着的对象复制到另外一块上面，然后再把已经使用过的内存空间一次清理掉","类型":"1-单选"},{"题干":"大数据（CMS）以下关于Serial（串行）收集器/Serial Old收集器描述错误的是","选项F":"","选项E":"","选项D":"新生代使用标记-整理算法，老年代使用复制算法","答案":"D","选项C":"使用-XX:+UseSerialGC来开启","选项B":"在垃圾收集时，会Stop-the-World","选项A":"是一个单线程的收集器","类型":"1-单选"},{"题干":"大数据（CMS）以下关于ParNew（并行）收集器描述错误的是","选项F":"","选项E":"","选项D":"新生代使用标记-整理算法，老年代使用复制算法","答案":"D","选项C":"使用-XX:+UseParNewGC来开启","选项B":"在垃圾收集时，会Stop-the-World","选项A":"使用多线程进行垃圾回收","类型":"1-单选"},{"题干":"大数据（CMS）以下不可以作为GC Roots的对象的是","选项F":"","选项E":"","选项D":"垃圾要回收的对象","答案":"D","选项C":"虚拟机栈（栈帧局部变量）中引用的对象","选项B":"方法区类静态属性引用的对象","选项A":"方法区中常量引用的对象","类型":"1-单选"},{"题干":"大数据（CMS）关于java虚拟机栈以下说法错误的是","选项F":"","选项E":"","选项D":"线程公有的，生命周期与线程不相同","答案":"D","选项C":"每一个方法从被调用直至执行完的过程，就对应着一个栈桢在虚拟机栈中从入栈到出栈的过程","选项B":"每个方法执行的时候都会创建一个栈桢","选项A":"线程私有的，生命周期与线程相同","类型":"1-单选"},{"题干":"大数据（CMS）关于在Jdk1.8后Java堆描述错误的是","选项F":"","选项E":"","选项D":"新生代=2个eden区+2个survivor区","答案":"D","选项C":"整个堆的大小等于新生代+老年代","选项B":"从内存回收的角度上来看，java堆可以细分为新生代和老年代","选项A":"java堆是所有线程共享的一片区域，虚拟机启动的时候创建，此区域存放对象的实例","类型":"1-单选"},{"题干":"大数据（CMS）JVM内存模型线程私有的包含下列选项中的哪些","选项F":"","选项E":"","选项D":"程序计数器","答案":"ACD","选项C":"本地方法栈","选项B":"方法区","选项A":"虚拟机栈","类型":"2-多选"},{"题干":"大数据（CMS）JVM内存模型中线程公有的","选项F":"","选项E":"","选项D":"内部方法栈","答案":"BC","选项C":"方法区","选项B":"堆","选项A":"程序计数器","类型":"2-多选"},{"题干":"大数据（CMS）堆存放的内容有","选项F":"","选项E":"","选项D":"函数中定义的基本类型数据","答案":"BC","选项C":"数组对象","选项B":"类的实例","选项A":"常量","类型":"2-多选"},{"题干":"大数据（CMS）JVM内存模型划分包含下列哪几块？","选项F":"","选项E":"","选项D":"直接内存","答案":"ABC","选项C":"内部方法栈","选项B":"堆","选项A":"方法区","类型":"2-多选"},{"题干":"大数据（CMS）关于程序计数器说法正确的是","选项F":"","选项E":"","选项D":"执行native方法时，计数器的值为空","答案":"ABCD","选项C":"这里永远不会OutOfMemoryError","选项B":"记录的是正在执行的虚拟机字节码指令的地址；","选项A":"是java内存模型中区域最小的一块","类型":"2-多选"},{"题干":"大数据（CMS）jdk与jre的区别描述正确的是","选项F":"","选项E":"","选项D":"jdk是运行环境","答案":"AB","选项C":"Jre是开发环境","选项B":"Jdk  是整个java 的核心，包括java运行环境，许多开发与调试java 工具，（javac，java，javadoc，jdb，javah，javap）和java 基础的类库（包括rt.Jar） jdk = jre+java开发工具","选项A":"Jre  是运行java 程序的环境的集合，包括jvm 标准实现以及java 核心类库","类型":"2-多选"},{"题干":"大数据（CMS）在Java中类的加载主要包括","选项F":"","选项E":"","选项D":"卸载：根据对象卸载","答案":"ABC","选项C":"初始化：对静态变量和静态代码块执行初始化工作","选项B":"链接：链接又可以划分","选项A":"装载：根据路径找到相对应的class文件","类型":"2-多选"},{"题干":"大数据（CMS）以下属于Java类加载器的有","选项F":"","选项E":"","选项D":"AppClassLoader 负责加载应用类jar/lib/ext/*.jar的类","答案":"ABC","选项C":"AppClassLoader 负责加载应用类 classpath 或者jar 中的类","选项B":"ExtClass Loader 负责加载扩展类    jar/lib/ext/*.jar 的类","选项A":"Bootstrap loader  负责加载系统类  jre/lib/rt.jar 的类","类型":"2-多选"},{"题干":"大数据（CMS）在Java虚拟机栈中，每个方法执行的时候都会创建一个栈桢,用于存储以下什么信息","选项F":"","选项E":"","选项D":"方法出口","答案":"ABCD","选项C":"动态链接","选项B":"操作栈","选项A":"局部变量表","类型":"2-多选"},{"题干":"大数据（CMS）在JVM中方法区是各个线程共享的一片内存区域，用来存放已被虚拟机所加载的信息包括","选项F":"","选项E":"","选项D":"即时编译器编译后的java代码","答案":"ABCD","选项C":"静态变量","选项B":"常量","选项A":"类信息","类型":"2-多选"},{"题干":"大数据（CMS）引用计数法是一种判断内存对象是否为垃圾算法","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）可达性分析是一种判断内存对象是否为垃圾算法","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）java虚拟机启动的时候不能指定垃圾回收器","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）相对于堆内存，直接内存特点是分配快而读写慢","选项F":"","选项E":"","选项D":"","答案":"B","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）直接内存的适合较大的数据存储需求、生命周期很长的对象","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）虚拟机栈中64位的long 和double 占用两个局部变量空间","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）JVM监控工具在运行期间对jvm内部情况进行监控，比如：对jvm参数、CPU、内存、堆等信息的查看","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）官方推荐新生代占堆的3/8","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）幸存代占新生代的1/10","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"大数据（CMS）根据实际应用来调整新生代和幸存代的大小","选项F":"","选项E":"","选项D":"","答案":"A","选项C":"","选项B":"","选项A":"","类型":"0-判断"},{"题干":"","选项F":"","选项E":"","选项D":"","答案":"","选项C":"","选项B":"","选项A":"","类型":""}]